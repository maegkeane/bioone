
* {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
} 

body {
	margin: 0;
}

/* navigation */

.page-header {
	padding: 0;
	margin: 0;
	height: 90px;
	width: 100%;
	position: relative;
	
	font-family: 'Open Sans', sans-serif;
	font-size: 12px;
	font-weight: 600;
	letter-spacing: 1px;
	text-transform: uppercase;

	background-image: url("images/headerbg.png");
}

.page-header img {
	width: 160px;
	float: left;
	position: relative;
	left: 50px;
	top: 20px;

	/* 
		Ian: Alright, here's a tricky little concept that can help with
		making your code more consistent and easier to edit in the future.
		How and why are you positioning this image? Are you doing it the
		best and most consistent way you can? If I look at the UL below,
		I see you're declaring a padding-right value equal to the left value
		on this image. My take away is that your goal is to have the .page-header
		element have 50px of left and right padding, but you're applying that
		to its child elements instead.

		This is not wrong per se. It technically works just fine. However you've
		now defined that 50px value in two separate places instead of one.
		I do this stuff ALL THE TIME (which is why I call it tricky) because it's
		easy to think, "okay, I want this iamge to be about 50px away from the
		edge of that thing," but really what's going on is that "I want EVERYTHING
		within that thing to be 50px away from the edge."
	*/
}

nav ul {
	float: right;
	padding-right: 50px;
	padding-top: 20px;
	padding-bottom: 20px;
}

nav ul li{
	display: inline;
	position: relative;
	padding-right: 20px;
}

nav ul li a {
	color: #FFF;
	text-decoration: none;
}

nav ul li:hover ul {
	display: block;
}

nav ul ul {
	position: absolute;
	display: none;
	left: 0;
	top: 100%;
	border: 2px solid #C1C6CB;
	border-radius: 3px;
	background-color: #FFF; 
	padding: 10px;
}

nav li li a {
	color: #64717D;
}

nav li li a:hover {
	color: #4B555E;
}

/* content */

article {
	max-width: 900px;
	padding-top: 30px;
	padding-left: 80px;
	font-family: 'Tisa Pro', serif;
}

section {
	margin-bottom: 35px;
}

/* 
	Ian: The next several rules are what most people would consider
	"base styles" that should live at the top of your document.
	Since you're applying styles to _all_ paragraphs and links and
	whatnot, if you put them at the top you allow them to cascade
	to everything below. As this is organized now, your header
	and navigation are special beasts which do not receive these styles.
*/
p {
	font-size: 14px;
	line-height: 20px;
}

a {
	color: #3B4991;
}

ol {
	list-style-type: none;
	padding: 0;
	font-size: 14px;
}

ol li {
	padding-bottom: 10px;
}

h1 {
	font-family: 'Open Sans', sans-serif;
	font-size: 28px;
	font-weight: 300;
	color: #6E9934;
}

h2 {
	font-size: 18px;
	font-weight: 100;
}

h2 a {
	color: #3B4991;
}

h3 {
	font-size: 14px;
	font-weight: 600;
	color: #6E9934;
}


/* footer */

footer {
	margin-top: 100px;
	margin-bottom: 100px;
	width: 100%;
	font-family: 'Tisa Pro', serif;
	font-size: 12px;
}

#footer-rule {
	width: 100%;
	height: 50px;
	margin-bottom: 20px;
	background-color: #D8DBE9;
}

#page-footer_content {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
	-ms-flex-pack: distribute;
	-webkit-justify-content: "space-around";
	-moz-justify-content: "space-around"; 
 	justify-content: "space-around";
 	-webkit-box-align: "baseline";
 	-ms-flex-align: "baseline";
 	-webkit-align-items: "baseline";
 	-moz-align-items: "baseline";
 	align-items: "baseline";
}

footer section {
	flex: 1;
	padding-left: 60px;
}

#footer-logo {
	width: 120px;
}

footer a {
	color: color: #3B4991;
	/* 
		Ian: Whoops, syntax error. CSS is tricky in this regard because
		most browsers will just silently ignore (or sometimes accept) 
		CSS and HTML syntax errors whereas Javascript syntax errors
		cause them to flip out and scream at you. So this color might work
		in Chrome because it's smart enough to figure out what you were trying
		to say, whereas Internet Explorer might go, "lol i can't understand this
		so dunno what color she wants so this footer link is just whatever color 
		links are supposed to be."

		A good practice is to validate your HTML and CSS every once in 
		awhile during a project to make sure you don't have any glaring errors.
		The W3C has great validators you can use:

		CSS: https://jigsaw.w3.org/css-validator/
		HTML: https://validator.w3.org/

		These will both tell you if there's something wrong with your code.
		Some of the warnings you can take with a grain of salt (eg. an image
		missing an alt tag will still work, it's just not as accessible as
		it could be).

		Once you get into Javascript, you'll want to look at JS Lint, which
		is similar but also very opinionated about how to best organize 
		your Javascript.

		http://www.jslint.com/
	*/
	text-decoration: none; 
}

h4 {
	/* 
		Ian: Base style, should probably live with the other base styles.
	*/
	padding: 0;
	margin: 0;
	list-style-type: none; 
	font-style: italic;
	font-weight: 100;
	letter-spacing: 1px;
	text-transform: uppercase;
} 

address {
	/* 
		Ian: Ditto.
	*/
	font-style: normal;
}

footer ul {
	list-style-type: none;
	padding: 0;
	margin: 0;
}

footer li img {
	width: 30px;
	margin-right: 5px;
	margin-top: 5px;
}


