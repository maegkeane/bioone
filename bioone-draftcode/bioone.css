* {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
} 

body {
	margin: 0;
}

/* navigation */
nav {
	padding: 0;
	margin: 0;
	height: 90px;
	width: 100%;
	background-image: url("images/headerbg.png");
	position: relative;
	z-index: 1;
}

a.navlink-firstlevel {
	/* 
		Ian: Remember that the power of CSS comes from the first
		letter: Cascading (Style Sheets). Rules applied to a parent
		cascade down to child elements unless you specifically
		change them. Thus, instead of declaring the font Open Sans
		on both .navlink-firstlevel and .navlink-secondlevel
		you could simply apply it to nav. That saves you a line
		of code. Same goes for font sizes, weights, text-deco, etc.
	*/
	font-family: 'Open Sans', sans-serif;
	font-size: 12px; 
	font-weight: 600;
	text-decoration: none;
	color: #FFF;
	letter-spacing: 1px; 
}

a.navlink-secondlevel{
	color: #64717D;
	font-family: 'Open Sans', sans-serif;
	font-size: 12px; 
	font-weight: 600;
	text-decoration: none;
	letter-spacing: 1px; 
}

/* 
	Ian: .navlink-firstlevel and .navlink-secondlevel are okay
	to use here, but just as a challenge to yourself, how
	could you give specific rules to each link without using
	a class?
*/

nav li ul li a:hover {
	color: #4B555E;
}

nav ul {
	float: right;
	padding-right: 50px;
	padding-top: 20px;
	padding-bottom: 20px;
}

nav ul li{
	display: inline;
	position: relative;
	padding-right: 20px;
}

nav ul ul {
	position: absolute;
	display: none;
	left: 0;
	top: 100%;
	border: 2px solid #C1C6CB;
	border-radius: 3px;
	background-color: #FFF; 
	padding: 10px;
}

nav li:hover ul {
	display: block;
}

#navlogo {
	/* 
		Ian: This isn't terribly important, but consider
		how you order rules in your CSS. There are lots of
		different ways to order them and none are more right
		than the others, but having a consistent system will make your
		code more readable.

		I like to do do an inverted pyramid approach, sort of like
		a newspaper article. Start with the highest level rules that
		define really important characteristics of the element and then
		get more specific from there.
			- Define element type (block? inline?)
			- Define element shape and size (width? padding?)
			- Define element position (margins? positioning? z-index?)
			- Define element visual styles, alphabetically

		So for example, here's how I'd organize the stuff below (includes
		some extra rules just for example purposes).

		display: block;												// Type
		width: 200px;													// Shape/size
		height: 100px;												// Shape/size
		padding: 0 10px;											// Shape/size
		margin: 10px auto;										// Position
		float: left;													// Position
		position: relative;										// Position
		top: 50px;														// Position
		left: 20px;														// Position
																					// Line break for organization purposes
		background-image: url('foobar');			// Visual styles
		background-repeat: no-repeat;					// Visual styles
		font-family: 'Open Sans', sans-serif;	// Visual styles
		font-size: 12px;											// Visual styles
		... etc.															// Visual styles
	*/

	width: 200px;
	height: 100px;
	background-image: url("images/whitelogo.png");
	background-repeat: no-repeat;
	position: relative;
	float: left;
	left: 50px;
	top: 20px;
}

/* Need to fix spacing of financials */

/* footer */

.page-footer {
	margin-top: 100px;
	width: 100%;
	height: 260px;
	/* 
		Ian: As a rule, don't set widths or heights unless you really
		need to. Especially heights. In responsive design, text wrapping
		can change the height of an element dramatically. Instead use
		padding-top and padding-bottom to give an element the breathing room
		you want.
	*/
}

#footer-rule {
	width: 100%;
	height: 50px;
	margin-bottom: 20px;
	background-color: #D8DBE9;
	/* 
		Ian: On the other hand, using a height here is okay because this
		is just a graphic element that will never change.
	*/
}

#footer-logo {
	height: 25px;
}

#page-footer_content {
	display: flex;
	justify-content: space-around;
	align-items: baseline;
	/* 
		Ian: This is where SASS will come in handy. While these flex rules
		are technically correct, they won't work in all browsers that
		support flex. Some browsers still use vendor prefixes. For example,
		the SASS flexbox mixin I use would have a similar number of lines
		in .scss:

		@include flexbox();
    @include justify-content('space-around');
    @include align-items('baseline');

		but the actual CSS output would be this:

		display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-pack: distribute;
    -webkit-justify-content: "space-around";
    -moz-justify-content: "space-around";
    justify-content: "space-around";
    -webkit-box-align: "baseline";
    -ms-flex-align: "baseline";
    -webkit-align-items: "baseline";
    -moz-align-items: "baseline";
    align-items: "baseline";
		
		Ultimately this code does the same thing as yours, but I'm 
		supporting more versions of browsers than the vanilla CSS 
		flexbox supports.
	*/
	padding-left: 20px;
	padding-right: 20px;
}

.list-title_footer {
	font-family: 'Tisa Pro', 'serif';
	font-size: 12px;
	text-transform: capitalize;
	letter-spacing: 0.5px;
	font-style: italic;
	list-style-type: none; 
} 

.list-item_footer {
	color: black;
}

.list-item-left_footer {
	text-align: right;
	font-family: 'Tisa Pro', 'serif';
	font-size: 12px;
	list-style-type: none; 
}

.list-item_footer, .list-item_footer a {
	font-family: 'Tisa Pro', 'serif';
	font-size: 12px;
	list-style-type: none;
	line-height: 18px; 
}

.list-item_footer a {
	color: #3B4991;
	line-height: 20px;
}

.list-social_footer {
	max-width: 30px;
	padding-top: 3px;
	position: relative;
	list-style-type: none;
}

/* content */

.main-content {
	max-width: 800px;
	padding-top: 30px;
	padding-left: 80px;
}

a {
	color: #3B4991;
	font-family: 'Tisa Pro', serif;
	font-style: bold;
}

p {
	font-family: 'Tisa Pro', serif;
	font-size: 14px;
	line-height: 20px;
}

.content-section {
	margin-bottom: 35px;
}

h3 {
	font-family: 'Tisa Pro', serif;
	font-size: 14px;
	font-weight: 600;
	color: #6E9934;
	margin-bottom: -10px;

	/* 
		Ian: Exercise caution with negative margins. They're okay to use
		as long as you know what you're doing, but they can be dangerous 
		in text content. Someday in the future you might have elements
		overlapping other elements and you'll be like, "why the hell is
		this happening? OH wait, I have a negative margin."
	*/
}

h1 {
	font-family: 'Open Sans', sans-serif;
	font-size: 1.8em;
	font-weight: 300;
	color: #6E9934;
}

h2 {
	font-family: 'Tisa Pro', serif;
	font-size: 1.2em;
	font-weight: 100;
	margin-bottom: -5px;

	/* 
		Ian: Syntax highlighting is cluing you into an error in
		your code right here.
	*/

h2 a {
	font-family: 'Tisa Pro', serif;
	font-size: 1.2em;
	color: #3B4991;
}
